name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  CGO_ENABLED: 0

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run linter
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

    - name: Check code format
      run: |
        if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'gofmt -w .'"
          gofmt -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: |
        go test -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//' > coverage.txt

    - name: Check test coverage
      run: |
        COVERAGE=$(cat coverage.txt)
        echo "Test coverage: $COVERAGE%"
        if [ "$COVERAGE" -lt 70 ]; then
          echo "Test coverage is below 70%"
          exit 1
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build binary
      run: |
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o bin/codeagent-${{ matrix.os }}-${{ matrix.arch }} ./cmd/server

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: codeagent-${{ matrix.os }}-${{ matrix.arch }}
        path: bin/codeagent-${{ matrix.os }}-${{ matrix.arch }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t codeagent:latest .

    - name: Test Docker image
      run: |
        docker run --rm codeagent:latest echo "Docker image test successful" 