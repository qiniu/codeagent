package context

import (
	"fmt"
	"strings"
	"time"
)

// PRFormatter 专门用于格式化PR描述
// 提供优雅、结构化的PR描述格式
type PRFormatter struct {
	maxDescriptionLength int
}

// NewPRFormatter 创建新的PR格式化器
func NewPRFormatter() *PRFormatter {
	return &PRFormatter{
		maxDescriptionLength: 1000,
	}
}

// FormatPRDescription 格式化PR描述
// 提供简洁、核心的PR描述
func (f *PRFormatter) FormatPRDescription(
	issueTitle string,
	issueBody string,
	summary string,
	changes string,
	testPlan string,
	aiOutput string,
	issueNumber int,
) string {
	var builder strings.Builder

	// 头部信息
	builder.WriteString(f.formatHeader(issueTitle, issueNumber))
	builder.WriteString("\n\n")

	// 简洁的summary（限制长度，避免啰嗦）
	if summary != "" {
		builder.WriteString(f.formatConciseSummary(summary))
		builder.WriteString("\n\n")
	} else {
		// 如果没有结构化summary，生成简洁的
		builder.WriteString(f.formatConciseSummary(f.generateBriefSummary(aiOutput, issueTitle)))
		builder.WriteString("\n\n")
	}

	// 变更详情（保持简洁）
	if changes != "" {
		builder.WriteString(f.formatConciseChanges(changes))
		builder.WriteString("\n\n")
	}

	// 技术细节（可选，保持折叠）
	builder.WriteString(f.formatTechnicalDetails(aiOutput))
	builder.WriteString("\n\n")

	// 页脚信息
	builder.WriteString(f.formatFooter())

	return builder.String()
}

// formatHeader 格式化PR头部
func (f *PRFormatter) formatHeader(issueTitle string, issueNumber int) string {
	return fmt.Sprintf(`# 🚀 %s

> **Closes #%d** | Auto-generated by CodeAgent 🤖`, issueTitle, issueNumber)
}

// formatConciseSummary 格式化简洁摘要
func (f *PRFormatter) formatConciseSummary(summary string) string {
	// 提取核心描述，避免主观语言
	concise := strings.TrimSpace(summary)

	// 移除主观开头和冗余词汇
	patterns := []string{
		"我已经", "我已", "我", "我们", "完全", "彻底", "主要", "重要",
		"成功", "完美", "优秀", "刚刚", "刚刚完成", "解决了",
	}

	for _, pattern := range patterns {
		concise = strings.ReplaceAll(concise, pattern, "")
	}

	// 移除标题行
	concise = strings.ReplaceAll(concise, "## Implementation Summary", "")
	concise = strings.ReplaceAll(concise, "## Summary", "")
	concise = strings.ReplaceAll(concise, "## Changes", "")
	concise = strings.TrimSpace(concise)

	// 重新组织语言使其更客观
	replacements := map[string]string{
		"重构了": "Refactored",
		"重构":  "Refactored",
		"解决了": "Fixed",
		"改进了": "Improved",
		"添加了": "Added",
		"实现了": "Implemented",
		"优化了": "Optimized",
	}

	for old, new := range replacements {
		concise = strings.ReplaceAll(concise, old, new)
	}

	// 清理多余的空格
	concise = strings.Join(strings.Fields(concise), " ")

	// 限制到简洁描述
	maxLength := 120
	if len(concise) > maxLength {
		words := strings.Fields(concise)
		var result []string
		currentLen := 0

		for _, word := range words {
			if currentLen+len(word)+1 > maxLength-3 {
				break
			}
			result = append(result, word)
			currentLen += len(word) + 1
		}

		if len(result) > 0 {
			concise = strings.Join(result, " ") + "..."
		} else {
			concise = concise[:maxLength] + "..."
		}
	}

	// 确保描述以功能为主
	if concise == "" {
		concise = "Implemented requested functionality"
	}

	// 首字母大写
	if len(concise) > 0 {
		concise = strings.ToUpper(concise[:1]) + concise[1:]
	}

	return fmt.Sprintf(`## 🎯 Summary

%s`, concise)
}

// formatConciseChanges 格式化简洁变更
func (f *PRFormatter) formatConciseChanges(changes string) string {
	// 提取前3个关键变更点
	lines := strings.Split(changes, "\n")
	var keyChanges []string

	for _, line := range lines {
		trimmed := strings.TrimSpace(line)
		if trimmed != "" && !strings.HasPrefix(trimmed, "#") {
			// 清理项目符号
			clean := strings.TrimPrefix(trimmed, "- ")
			clean = strings.TrimPrefix(clean, "• ")
			clean = strings.TrimPrefix(clean, "* ")
			if clean != "" && len(clean) > 3 {
				keyChanges = append(keyChanges, clean)
				if len(keyChanges) >= 3 {
					break
				}
			}
		}
	}

	if len(keyChanges) == 0 {
		return "## 📝 Changes Made\n\n- Implemented requested functionality"
	}

	result := "## 📝 Changes Made\n\n"
	for _, change := range keyChanges {
		result += fmt.Sprintf("- %s\n", change)
	}
	return result
}

// formatTechnicalDetails 格式化技术细节
func (f *PRFormatter) formatTechnicalDetails(aiOutput string) string {
	// 提取关键信息
	keyPoints := f.extractKeyPoints(aiOutput)

	var builder strings.Builder

	// 添加关键实现点（如果有的话）
	if len(keyPoints) > 0 {
		builder.WriteString("### Key Implementation Points:\n")
		for _, point := range keyPoints {
			builder.WriteString(fmt.Sprintf("- %s\n", point))
		}
		builder.WriteString("\n")
	}

	// 添加AI生成的完整分析作为折叠内容
	builder.WriteString("<details>\n")
	builder.WriteString("<summary><b>🤖 Full AI Analysis</b></summary>\n\n")
	builder.WriteString("```\n")
	// 截断过长的输出
	if len(aiOutput) > 2000 {
		builder.WriteString(aiOutput[:2000] + "... [truncated]")
	} else {
		builder.WriteString(aiOutput)
	}
	builder.WriteString("\n```\n")
	builder.WriteString("</details>")

	return builder.String()
}

// formatFooter 格式化页脚
func (f *PRFormatter) formatFooter() string {
	return fmt.Sprintf(`---

*This pull request was automatically generated by [CodeAgent](https://github.com/qiniu/codeagent) on %s.*

> 💡 **Review Tips**:
> - Focus on code quality and correctness
> - Verify the implementation matches the issue requirements
> - Check for proper error handling and edge cases
> - Ensure tests are comprehensive`, time.Now().Format("2006-01-02 15:04:05"))
}

// formatMarkdownSection 格式化Markdown段落
func (f *PRFormatter) formatMarkdownSection(content string) string {
	// 清理多余的空行和格式
	content = strings.TrimSpace(content)
	content = strings.ReplaceAll(content, "\r\n", "\n")
	content = strings.ReplaceAll(content, "\r", "\n")

	// 确保段落之间有空行
	lines := strings.Split(content, "\n")
	var formattedLines []string

	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line != "" {
			formattedLines = append(formattedLines, line)
		}
	}

	return strings.Join(formattedLines, "\n")
}

// cleanIssueBody 清理Issue正文
func (f *PRFormatter) cleanIssueBody(body string) string {
	// 移除命令行
	body = strings.ReplaceAll(body, "/code", "")
	body = strings.ReplaceAll(body, "/continue", "")

	// 清理多余的空格和空行
	body = strings.TrimSpace(body)
	body = strings.ReplaceAll(body, "\r\n", "\n")
	body = strings.ReplaceAll(body, "\r", "\n")

	// 移除多余的空行
	for strings.Contains(body, "\n\n\n") {
		body = strings.ReplaceAll(body, "\n\n\n", "\n\n")
	}

	return body
}

// extractKeyPoints 从AI输出中提取关键点
func (f *PRFormatter) extractKeyPoints(aiOutput string) []string {
	var points []string

	// 查找常见的关键信息模式
	patterns := []string{
		"implemented",
		"added",
		"modified",
		"fixed",
		"refactored",
		"created",
		"updated",
		"removed",
		"enhanced",
		"optimized",
		"deleted",
		"changed",
		"improved",
		"simplified",
		"restructured",
	}

	lines := strings.Split(aiOutput, "\n")
	for _, line := range lines {
		line = strings.TrimSpace(line)
		lineLower := strings.ToLower(line)

		// 跳过空行和过短的行
		if line == "" || len(line) < 10 {
			continue
		}

		// 跳过明显的标题行
		if strings.HasPrefix(line, "#") || strings.HasPrefix(line, "##") {
			continue
		}

		for _, pattern := range patterns {
			if strings.Contains(lineLower, pattern) && len(line) < 200 {
				// 清理行首的符号
				cleanLine := strings.TrimPrefix(line, "- ")
				cleanLine = strings.TrimPrefix(cleanLine, "* ")
				cleanLine = strings.TrimPrefix(cleanLine, "• ")
				cleanLine = strings.TrimPrefix(cleanLine, "✅ ")
				cleanLine = strings.TrimPrefix(cleanLine, "1. ")
				cleanLine = strings.TrimPrefix(cleanLine, "2. ")
				cleanLine = strings.TrimPrefix(cleanLine, "3. ")

				if cleanLine != "" && !f.containsPoint(points, cleanLine) {
					points = append(points, cleanLine)
				}
				break
			}
		}
	}

	// 限制关键点数量
	if len(points) > 6 {
		points = points[:6]
	}

	return points
}

// containsPoint 检查是否已包含相似的关键点
func (f *PRFormatter) containsPoint(points []string, newPoint string) bool {
	newPointLower := strings.ToLower(newPoint)
	for _, point := range points {
		if strings.Contains(newPointLower, strings.ToLower(point)) || strings.Contains(strings.ToLower(point), newPointLower) {
			return true
		}
	}
	return false
}

// generateBriefSummary 从AI输出生成简洁摘要
func (f *PRFormatter) generateBriefSummary(aiOutput string, issueTitle string) string {
	// 提取第一句话作为摘要
	lines := strings.Split(aiOutput, "\n")
	for _, line := range lines {
		trimmed := strings.TrimSpace(line)
		if trimmed != "" && len(trimmed) > 10 && !strings.HasPrefix(trimmed, "#") {
			// 限制到一句话
			if len(trimmed) > 150 {
				// 找到第一个句号
				if idx := strings.Index(trimmed, "."); idx > 0 && idx < 150 {
					return trimmed[:idx+1]
				}
				return trimmed[:150] + "..."
			}
			return trimmed
		}
	}

	// 回退描述
	return fmt.Sprintf("Implements the requested functionality: %s", issueTitle)
}

// GenerateSimpleSummary 生成简单的摘要
func (f *PRFormatter) GenerateSimpleSummary(issueTitle string, issueNumber int) string {
	return fmt.Sprintf(`## Summary

This PR implements the requested functionality from Issue #%d: %s

## Changes

- ✅ Implemented the requested feature
- 📝 Added necessary code changes
- 🧪 Ensured proper functionality

## Testing

- [x] Code compiles successfully
- [x] Functionality works as expected
- [x] No breaking changes introduced

---

*Generated by CodeAgent on %s*`,
		issueNumber, issueTitle, time.Now().Format("2006-01-02 15:04:05"))
}
